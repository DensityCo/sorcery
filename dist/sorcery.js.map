{"version":3,"file":"sorcery.js","sources":["../src/index.js","../src/Node.js","../src/utils/getMap.js","../src/utils/getSourceMappingUrl.js","../src/utils/getMapFromUrl.js","../src/utils/sourceMappingURL.js","../src/utils/atob.js","../src/utils/decodeMappings.js","../src/Chain.js","../src/utils/encodeMappings.js","../node_modules/vlq/src/vlq.js","../src/SourceMap.js","../src/utils/btoa.js","../src/utils/slash.js"],"sourcesContent":["import { resolve } from 'path';\nimport Node from './Node';\nimport Chain from './Chain';\n\nexport function load ( file, options ) {\n\tconst { node, sourcesContentByPath, sourceMapByPath } = init( file, options );\n\n\treturn node.load( sourcesContentByPath, sourceMapByPath )\n\t\t.then( () => node.isOriginalSource ? null : new Chain( node, sourcesContentByPath ) );\n}\n\nexport function loadSync ( file, options = {} ) {\n\tconst { node, sourcesContentByPath, sourceMapByPath } = init( file, options );\n\n\tnode.loadSync( sourcesContentByPath, sourceMapByPath );\n\treturn node.isOriginalSource ? null : new Chain( node, sourcesContentByPath );\n}\n\nfunction init ( file, options = {} ) {\n\tconst node = new Node({ file });\n\n\tlet sourcesContentByPath = {};\n\tlet sourceMapByPath = {};\n\n\tif ( options.content ) {\n\t\tObject.keys( options.content ).forEach( key => {\n\t\t\tsourcesContentByPath[ resolve( key ) ] = options.content[ key ];\n\t\t});\n\t}\n\n\tif ( options.sourcemaps ) {\n\t\tObject.keys( options.sourcemaps ).forEach( key => {\n\t\t\tsourceMapByPath[ resolve( key ) ] = options.sourcemaps[ key ];\n\t\t});\n\t}\n\n\treturn { node, sourcesContentByPath, sourceMapByPath };\n}\n","import { dirname, resolve } from 'path';\nimport { readFile, readFileSync, Promise } from 'sander';\nimport decodeMappings from './utils/decodeMappings';\nimport getMap from './utils/getMap';\n\nexport default class Node {\n\tconstructor ({ file, content }) {\n\t\tthis.file = file ? resolve( file ) : null;\n\t\tthis.content = content || null; // sometimes exists in sourcesContent, sometimes doesn't\n\n\t\tif ( !this.file && this.content === null ) {\n\t\t\tthrow new Error( 'A source must specify either file or content' );\n\t\t}\n\n\t\t// these get filled in later\n\t\tthis.map = null;\n\t\tthis.mappings = null;\n\t\tthis.sources = null;\n\t\tthis.isOriginalSource = null;\n\n\t\tthis._stats = {\n\t\t\tdecodingTime: 0,\n\t\t\tencodingTime: 0,\n\t\t\ttracingTime: 0,\n\n\t\t\tuntraceable: 0\n\t\t};\n\t}\n\n\tload ( sourcesContentByPath, sourceMapByPath ) {\n\t\treturn getContent( this, sourcesContentByPath ).then( content => {\n\t\t\tthis.content = sourcesContentByPath[ this.file ] = content;\n\n\t\t\treturn getMap( this, sourceMapByPath ).then( map => {\n\t\t\t\tif ( !map ) return null;\n\n\t\t\t\tthis.map = map;\n\n\t\t\t\tlet decodingStart = process.hrtime();\n\t\t\t\tthis.mappings = decodeMappings( map.mappings );\n\t\t\t\tlet decodingTime = process.hrtime( decodingStart );\n\t\t\t\tthis._stats.decodingTime = 1e9 * decodingTime[0] + decodingTime[1];\n\n\t\t\t\tconst sourcesContent = map.sourcesContent || [];\n\n\t\t\t\tthis.sources = map.sources.map( ( source, i ) => {\n\t\t\t\t\treturn new Node({\n\t\t\t\t\t\tfile: source ? resolveSourcePath( this, map.sourceRoot, source ) : null,\n\t\t\t\t\t\tcontent: sourcesContent[i]\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tconst promises = this.sources.map( node => node.load( sourcesContentByPath, sourceMapByPath ) );\n\t\t\t\treturn Promise.all( promises );\n\t\t\t});\n\t\t});\n\t}\n\n\tloadSync ( sourcesContentByPath, sourceMapByPath ) {\n\t\tif ( !this.content ) {\n\t\t\tif ( !sourcesContentByPath[ this.file ] ) {\n\t\t\t\tsourcesContentByPath[ this.file ] = readFileSync( this.file ).toString();\n\t\t\t}\n\n\t\t\tthis.content = sourcesContentByPath[ this.file ];\n\t\t}\n\n\t\tconst map = getMap( this, sourceMapByPath, true );\n\t\tlet sourcesContent;\n\n\t\tif ( !map ) {\n\t\t\tthis.isOriginalSource = true;\n\t\t} else {\n\t\t\tthis.map = map;\n\t\t\tthis.mappings = decodeMappings( map.mappings );\n\n\t\t\tsourcesContent = map.sourcesContent || [];\n\n\t\t\tthis.sources = map.sources.map( ( source, i ) => {\n\t\t\t\tconst node = new Node({\n\t\t\t\t\tfile: resolveSourcePath( this, map.sourceRoot, source ),\n\t\t\t\t\tcontent: sourcesContent[i]\n\t\t\t\t});\n\n\t\t\t\tnode.loadSync( sourcesContentByPath, sourceMapByPath );\n\t\t\t\treturn node;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Traces a segment back to its origin\n\t * @param {number} lineIndex - the zero-based line index of the\n\t   segment as found in `this`\n\t * @param {number} columnIndex - the zero-based column index of the\n\t   segment as found in `this`\n\t * @param {string || null} - if specified, the name that should be\n\t   (eventually) returned, as it is closest to the generated code\n\t * @returns {object}\n\t     @property {string} source - the filepath of the source\n\t     @property {number} line - the one-based line index\n\t     @property {number} column - the zero-based column index\n\t     @property {string || null} name - the name corresponding\n\t     to the segment being traced\n\t */\n\ttrace ( lineIndex, columnIndex, name ) {\n\t\t// If this node doesn't have a source map, we have\n\t\t// to assume it is the original source\n\t\tif ( this.isOriginalSource ) {\n\t\t\treturn {\n\t\t\t\tsource: this.file,\n\t\t\t\tline: lineIndex + 1,\n\t\t\t\tcolumn: columnIndex || 0,\n\t\t\t\tname: name\n\t\t\t};\n\t\t}\n\n\t\t// Otherwise, we need to figure out what this position in\n\t\t// the intermediate file corresponds to in *its* source\n\t\tconst segments = this.mappings[ lineIndex ];\n\n\t\tif ( !segments || segments.length === 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( columnIndex != null ) {\n\t\t\tlet len = segments.length;\n\t\t\tlet i;\n\n\t\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\t\tlet generatedCodeColumn = segments[i][0];\n\n\t\t\t\tif ( generatedCodeColumn > columnIndex ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( generatedCodeColumn === columnIndex ) {\n\t\t\t\t\tif ( segments[i].length < 4 ) return null;\n\n\t\t\t\t\tlet sourceFileIndex = segments[i][1];\n\t\t\t\t\tlet sourceCodeLine = segments[i][2];\n\t\t\t\t\tlet sourceCodeColumn = segments[i][3];\n\t\t\t\t\tlet nameIndex = segments[i][4];\n\n\t\t\t\t\tlet parent = this.sources[ sourceFileIndex ];\n\t\t\t\t\treturn parent.trace( sourceCodeLine, sourceCodeColumn, this.map.names[ nameIndex ] || name );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// fall back to a line mapping\n\t\tlet sourceFileIndex = segments[0][1];\n\t\tlet sourceCodeLine = segments[0][2];\n\t\tlet nameIndex = segments[0][4];\n\n\t\tlet parent = this.sources[ sourceFileIndex ];\n\t\treturn parent.trace( sourceCodeLine, null, this.map.names[ nameIndex ] || name );\n\t}\n}\n\nfunction getContent ( node, sourcesContentByPath ) {\n\tif ( node.file in sourcesContentByPath ) {\n\t\tnode.content = sourcesContentByPath[ node.file ];\n\t}\n\n\tif ( !node.content ) {\n\t\treturn readFile( node.file ).then( String );\n\t}\n\n\treturn Promise.resolve( node.content );\n}\n\nfunction resolveSourcePath ( node, sourceRoot, source ) {\n\treturn resolve( dirname( node.file ), sourceRoot || '', source );\n}\n","import getMapFromUrl from './getMapFromUrl';\nimport getSourceMappingUrl from './getSourceMappingUrl';\nimport { Promise } from 'sander';\n\nexport default function getMap ( node, sourceMapByPath, sync ) {\n\tif ( node.file in sourceMapByPath ) {\n\t\tconst map = sourceMapByPath[ node.file ];\n\t\treturn sync ? map : Promise.resolve( map );\n\t}\n\n\telse {\n\t\tconst url = getSourceMappingUrl( node.content );\n\n\t\tif ( !url ) {\n\t\t\tnode.isOriginalSource = true;\n\t\t\treturn sync ? null : Promise.resolve( null );\n\t\t}\n\n\t\treturn getMapFromUrl( url, node.file, sync );\n\t}\n}","import SOURCEMAPPING_URL from './sourceMappingURL';\n\nexport default function getSourceMappingUrl ( str ) {\n\tvar index, substring, url, match;\n\n\t// assume we want the last occurence\n\tindex = str.lastIndexOf( `${SOURCEMAPPING_URL}=` );\n\n\tif ( index === -1 ) {\n\t\treturn null;\n\t}\n\n\tsubstring = str.substring( index + 17 );\n\tmatch = /^[^\\r\\n]+/.exec( substring );\n\n\turl = match ? match[0] : null;\n\n\t// possibly a better way to do this, but we don't want to exclude whitespace\n\t// from the sourceMappingURL because it might not have been correctly encoded\n\tif ( url && url.slice( -2 ) === '*/' ) {\n\t\turl = url.slice( 0, -2 ).trim();\n\t}\n\n\treturn url;\n}\n","import { dirname, resolve } from 'path';\nimport { readFile, readFileSync, Promise } from 'sander';\nimport atob from './atob';\nimport SOURCEMAPPING_URL from './sourceMappingURL';\n\n/**\n * Turns a sourceMappingURL into a sourcemap\n * @param {string} url - the sourceMappingURL. Can be a\n   base64-encoded data URI\n * @param {string} base - the URL against which relative URLS\n   should be resolved\n * @param {boolean} sync - if `true`, return a promise, otherwise\n   return the sourcemap\n * @returns {object} - a version 3 sourcemap\n */\nexport default function getMapFromUrl ( url, base, sync ) {\n\tif ( /^data:/.test( url ) ) { // TODO beef this up\n\t\tconst match = /base64,(.+)$/.exec( url );\n\n\t\tif ( !match ) {\n\t\t\tthrow new Error( `${SOURCEMAPPING_URL} is not base64-encoded` );\n\t\t}\n\n\t\tconst json = atob( match[1] );\n\t\tconst map = JSON.parse( json );\n\t\treturn sync ? map : Promise.resolve( map );\n\t}\n\n\turl = resolve( dirname( base ), decodeURI( url ) );\n\n\tif ( sync ) {\n\t\treturn JSON.parse( readFileSync( url ).toString() );\n\t} else {\n\t\treturn readFile( url ).then( String ).then( JSON.parse );\n\t}\n}\n","// this looks ridiculous, but it prevents sourcemap tooling from mistaking\n// this for an actual sourceMappingURL\nlet SOURCEMAPPING_URL = 'sourceMa';\nSOURCEMAPPING_URL += 'ppingURL';\n\nexport default SOURCEMAPPING_URL;\n","/**\n * Decodes a base64 string\n * @param {string} base64 - the string to decode\n * @returns {string}\n */\nexport default function atob ( base64 ) {\n\treturn new Buffer( base64, 'base64' ).toString( 'utf8' );\n}","import crc32 from 'buffer-crc32';\nimport { decode } from 'vlq';\n\nlet cache = {};\n\nfunction decodeSegments ( encodedSegments ) {\n\tlet i = encodedSegments.length;\n\tlet segments = new Array( i);\n\n\twhile ( i-- ) {\n\t\tsegments[i] = decode( encodedSegments[i] );\n\t}\n\n\treturn segments;\n}\n\nexport default function decodeMappings ( mappings ) {\n\tlet checksum = crc32( mappings );\n\n\tif ( !cache[ checksum ] ) {\n\t\tlet sourceFileIndex = 0;   // second field\n\t\tlet sourceCodeLine = 0;    // third field\n\t\tlet sourceCodeColumn = 0;  // fourth field\n\t\tlet nameIndex = 0;         // fifth field\n\n\t\tlet lines = mappings.split( ';' );\n\t\tlet numLines = lines.length;\n\t\tlet decoded = new Array( numLines );\n\n\t\tlet i, j, line, generatedCodeColumn, decodedLine, segments, segment, result;\n\n\t\tfor ( i = 0; i < numLines; i += 1 ) {\n\t\t\tline = lines[i];\n\n\t\t\tgeneratedCodeColumn = 0; // first field - reset each time\n\t\t\tdecodedLine = [];\n\n\t\t\tsegments = decodeSegments( line.split( ',' ) );\n\n\t\t\tfor ( j = 0; j < segments.length; j += 1 ) {\n\t\t\t\tsegment = segments[j];\n\n\t\t\t\tif ( !segment.length ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tgeneratedCodeColumn += segment[0];\n\n\t\t\t\tresult = [ generatedCodeColumn ];\n\t\t\t\tdecodedLine.push( result );\n\n\t\t\t\tif ( segment.length === 1 ) {\n\t\t\t\t\t// only one field!\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsourceFileIndex  += segment[1];\n\t\t\t\tsourceCodeLine   += segment[2];\n\t\t\t\tsourceCodeColumn += segment[3];\n\n\t\t\t\tresult.push( sourceFileIndex, sourceCodeLine, sourceCodeColumn );\n\n\t\t\t\tif ( segment.length === 5 ) {\n\t\t\t\t\tnameIndex += segment[4];\n\t\t\t\t\tresult.push( nameIndex );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdecoded[i] = decodedLine;\n\t\t}\n\n\t\tcache[ checksum ] = decoded;\n\t}\n\n\treturn cache[ checksum ];\n}\n","import { basename, dirname, extname, relative, resolve } from 'path';\nimport { writeFile, writeFileSync } from 'sander';\nimport SourceMap from './SourceMap';\nimport encodeMappings from './utils/encodeMappings';\nimport slash from './utils/slash';\n\nlet SOURCEMAPPING_URL = 'sourceMa';\nSOURCEMAPPING_URL += 'ppingURL';\n\nconst SOURCEMAP_COMMENT = new RegExp( `\\n*(?:` +\n\t`\\\\/\\\\/[@#]\\\\s*${SOURCEMAPPING_URL}=([^'\"]+)|` +      // js\n\t`\\\\/\\\\*#?\\\\s*${SOURCEMAPPING_URL}=([^'\"]+)\\\\s\\\\*\\\\/)` + // css\n`\\\\s*$`, 'g' );\n\nexport default class Chain {\n\tconstructor ( node, sourcesContentByPath ) {\n\t\tthis.node = node;\n\t\tthis.sourcesContentByPath = sourcesContentByPath;\n\n\t\tthis._stats = {};\n\t}\n\n\tstat () {\n\t\treturn {\n\t\t\tselfDecodingTime: this._stats.decodingTime / 1e6,\n\t\t\ttotalDecodingTime: ( this._stats.decodingTime + tally( this.node.sources, 'decodingTime' ) ) / 1e6,\n\n\t\t\tencodingTime: this._stats.encodingTime / 1e6,\n\t\t\ttracingTime: this._stats.tracingTime / 1e6,\n\n\t\t\tuntraceable: this._stats.untraceable\n\t\t};\n\t}\n\n\tapply ( options = {} ) {\n\t\tlet allNames = [];\n\t\tlet allSources = [];\n\n\t\tconst applySegment = ( segment, result ) => {\n\t\t\tif ( segment.length < 4 ) return;\n\n\t\t\tconst traced = this.node.sources[ segment[1] ].trace( // source\n\t\t\t\tsegment[2], // source code line\n\t\t\t\tsegment[3], // source code column\n\t\t\t\tthis.node.map.names[ segment[4] ]\n\t\t\t);\n\n\t\t\tif ( !traced ) {\n\t\t\t\tthis._stats.untraceable += 1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet sourceIndex = allSources.indexOf( traced.source );\n\t\t\tif ( !~sourceIndex ) {\n\t\t\t\tsourceIndex = allSources.length;\n\t\t\t\tallSources.push( traced.source );\n\t\t\t}\n\n\t\t\tlet newSegment = [\n\t\t\t\tsegment[0], // generated code column\n\t\t\t\tsourceIndex,\n\t\t\t\ttraced.line - 1,\n\t\t\t\ttraced.column\n\t\t\t];\n\n\t\t\tif ( traced.name ) {\n\t\t\t\tlet nameIndex = allNames.indexOf( traced.name );\n\t\t\t\tif ( !~nameIndex ) {\n\t\t\t\t\tnameIndex = allNames.length;\n\t\t\t\t\tallNames.push( traced.name );\n\t\t\t\t}\n\n\t\t\t\tnewSegment[4] = nameIndex;\n\t\t\t}\n\n\t\t\tresult[ result.length ] = newSegment;\n\t\t};\n\n\t\t// Trace mappings\n\t\tlet tracingStart = process.hrtime();\n\n\t\tlet i = this.node.mappings.length;\n\t\tlet resolved = new Array( i );\n\n\t\tlet j, line, result;\n\n\t\twhile ( i-- ) {\n\t\t\tline = this.node.mappings[i];\n\t\t\tresolved[i] = result = [];\n\n\t\t\tfor ( j = 0; j < line.length; j += 1 ) {\n\t\t\t\tapplySegment( line[j], result );\n\t\t\t}\n\t\t}\n\n\t\tlet tracingTime = process.hrtime( tracingStart );\n\t\tthis._stats.tracingTime = 1e9 * tracingTime[0] + tracingTime[1];\n\n\t\t// Encode mappings\n\t\tlet encodingStart = process.hrtime();\n\t\tlet mappings = encodeMappings( resolved );\n\t\tlet encodingTime = process.hrtime( encodingStart );\n\t\tthis._stats.encodingTime = 1e9 * encodingTime[0] + encodingTime[1];\n\n\t\tlet includeContent = options.includeContent !== false;\n\n\t\treturn new SourceMap({\n\t\t\tfile: basename( this.node.file ),\n\t\t\tsources: allSources.map( source => slash( relative( options.base || dirname( this.node.file ), source ) ) ),\n\t\t\tsourcesContent: allSources.map( source => includeContent ? this.sourcesContentByPath[ source ] : null ),\n\t\t\tnames: allNames,\n\t\t\tmappings\n\t\t});\n\t}\n\n\ttrace ( oneBasedLineIndex, zeroBasedColumnIndex ) {\n\t\treturn this.node.trace( oneBasedLineIndex - 1, zeroBasedColumnIndex, null );\n\t}\n\n\twrite ( dest, options ) {\n\t\tif ( typeof dest !== 'string' ) {\n\t\t\toptions = dest;\n\t\t\tdest = this.node.file;\n\t\t}\n\n\t\toptions = options || {};\n\n\t\tconst { resolved, content, map } = processWriteOptions( dest, this, options );\n\n\t\tlet promises = [ writeFile( resolved, content ) ];\n\n\t\tif ( !options.inline ) {\n\t\t\tpromises.push( writeFile( resolved + '.map', map.toString() ) );\n\t\t}\n\n\t\treturn Promise.all( promises );\n\t}\n\n\twriteSync ( dest, options ) {\n\t\tif ( typeof dest !== 'string' ) {\n\t\t\toptions = dest;\n\t\t\tdest = this.node.file;\n\t\t}\n\n\t\toptions = options || {};\n\n\t\tconst { resolved, content, map } = processWriteOptions( dest, this, options );\n\n\t\twriteFileSync( resolved, content );\n\n\t\tif ( !options.inline ) {\n\t\t\twriteFileSync( resolved + '.map', map.toString() );\n\t\t}\n\t}\n}\n\nfunction processWriteOptions ( dest, chain, options ) {\n\tconst resolved = resolve( dest );\n\n\tconst map = chain.apply({\n\t\tincludeContent: options.includeContent,\n\t\tbase: options.base ? resolve( options.base ) : dirname( resolved )\n\t});\n\n\tconst url = options.inline ? map.toUrl() : ( options.absolutePath ? resolved : basename( resolved ) ) + '.map';\n\n\t// TODO shouldn't url be relative?\n\tconst content = chain.node.content.replace( SOURCEMAP_COMMENT, '' ) + sourcemapComment( url, resolved );\n\n\treturn { resolved, content, map };\n}\n\nfunction tally ( nodes, stat ) {\n\treturn nodes.reduce( ( total, node ) => {\n\t\treturn total + node._stats[ stat ];\n\t}, 0 );\n}\n\nfunction sourcemapComment ( url, dest ) {\n\tconst ext = extname( dest );\n\turl = encodeURI( url );\n\n\tif ( ext === '.css' ) {\n\t\treturn `\\n/*# ${SOURCEMAPPING_URL}=${url} */\\n`;\n\t}\n\n\treturn `\\n//# ${SOURCEMAPPING_URL}=${url}\\n`;\n}\n","import { encode } from 'vlq';\n\nexport default function encodeMappings ( decoded ) {\n\tlet offsets = {\n\t\tgeneratedCodeColumn: 0,\n\t\tsourceFileIndex: 0,   // second field\n\t\tsourceCodeLine: 0,    // third field\n\t\tsourceCodeColumn: 0,  // fourth field\n\t\tnameIndex: 0          // fifth field\n\t};\n\n\treturn decoded.map( function ( line ) {\n\t\toffsets.generatedCodeColumn = 0; // first field - reset each time\n\t\treturn line.map( encodeSegment ).join( ',' );\n\t}).join( ';' );\n\n\tfunction encodeSegment ( segment ) {\n\t\tif ( !segment.length ) {\n\t\t\treturn segment;\n\t\t}\n\n\t\tlet result = new Array( segment.length );\n\n\t\tresult[0] = segment[0] - offsets.generatedCodeColumn;\n\t\toffsets.generatedCodeColumn = segment[0];\n\n\t\tif ( segment.length === 1 ) {\n\t\t\t// only one field!\n\t\t\treturn result;\n\t\t}\n\n\t\tresult[1] = segment[1] - offsets.sourceFileIndex;\n\t\tresult[2] = segment[2] - offsets.sourceCodeLine;\n\t\tresult[3] = segment[3] - offsets.sourceCodeColumn;\n\n\t\toffsets.sourceFileIndex  = segment[1];\n\t\toffsets.sourceCodeLine   = segment[2];\n\t\toffsets.sourceCodeColumn = segment[3];\n\n\t\tif ( segment.length === 5 ) {\n\t\t\tresult[4] = segment[4] - offsets.nameIndex;\n\t\t\toffsets.nameIndex = segment[4];\n\t\t}\n\n\t\treturn encode( result );\n\t}\n}\n","var charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nexport function decode ( string ) {\n\tvar result = [],\n\t\tlen = string.length,\n\t\ti,\n\t\thasContinuationBit,\n\t\tshift = 0,\n\t\tvalue = 0,\n\t\tinteger,\n\t\tshouldNegate;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tinteger = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\thasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tshouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function encode ( value ) {\n\tvar result, i;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '', clamped;\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tclamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n","import btoa from './utils/btoa';\n\nexport default class SourceMap {\n\tconstructor ( properties ) {\n\t\tthis.version = 3;\n\n\t\tthis.file           = properties.file;\n\t\tthis.sources        = properties.sources;\n\t\tthis.sourcesContent = properties.sourcesContent;\n\t\tthis.names          = properties.names;\n\t\tthis.mappings       = properties.mappings;\n\t}\n\n\ttoString () {\n\t\treturn JSON.stringify( this );\n\t}\n\n\ttoUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n}","/**\n * Encodes a string as base64\n * @param {string} str - the string to encode\n * @returns {string}\n */\nexport default function btoa ( str ) {\n\treturn new Buffer( str ).toString( 'base64' );\n}","export default function slash ( path ) {\n\treturn typeof path === 'string' ?\n\t\tpath.replace( /\\\\/g, '/' ) :\n\t\tpath;\n}\n"],"names":["resolve","loadSync","load","dirname","Promise","readFile","readFileSync","_classCallCheck","SOURCEMAPPING_URL","extname","basename","writeFileSync","writeFile","relative"],"mappings":"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"}